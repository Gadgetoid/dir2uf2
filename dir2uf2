#!/usr/bin/env python3

import argparse
import struct
import pathlib
import littlefs


UF2_MAGIC_START0 = 0x0A324655  # "UF2\n"
UF2_MAGIC_START1 = 0x9E5D5157  # Randomly selected
UF2_MAGIC_END    = 0x0AB16F30  # Ditto
FAMILY_ID        = 0xe48bff56  # RP2040
APP_START_ADDR   = 0x1012c000  # Pico W MicroPython LFSV2 offset
APP_SIZE         = 848 * 1024


def convert_to_uf2(file_content):
    datapadding = b""
    while len(datapadding) < 512 - 256 - 32 - 4:
        datapadding += b"\x00\x00\x00\x00"
    numblocks = (len(file_content) + 255) // 256
    outp = []
    for blockno in range(numblocks):
        ptr = 256 * blockno
        chunk = file_content[ptr:ptr + 256]
        flags = 0x0
        if FAMILY_ID:
            flags |= 0x2000
        hd = struct.pack(b"<IIIIIIII",
                         UF2_MAGIC_START0, UF2_MAGIC_START1,
                         flags, ptr + APP_START_ADDR, 256, blockno, numblocks, FAMILY_ID)
        while len(chunk) < 256:
            chunk += b"\x00"
        block = hd + chunk + datapadding + struct.pack(b"<I", UF2_MAGIC_END)
        assert len(block) == 512
        outp.append(block)
    return b"".join(outp)


parser = argparse.ArgumentParser()
parser.add_argument("--filename", default="filesystem", help="Output filename.")
parser.add_argument("--block-size", type=int, default=4096, help="LFS block size in Kb.")
parser.add_argument("--read-size", type=int, default=256, help="LFS read size in Kb.")
parser.add_argument("--prog-size", type=int, default=32, help="LFS prog size in Kb.")
parser.add_argument("--manifest", default=None, help="Manifest to filter copied files.")
parser.add_argument("source_dir", help="Source directory.")
args = parser.parse_args()

block_count = APP_SIZE / args.block_size
if block_count * args.block_size != APP_SIZE:
    print("image size should be a multiple of block size")
    exit(1)

lfs = littlefs.LittleFS(
    block_size=args.block_size,
    block_count=block_count,
    read_size=args.read_size,
    prog_size=args.prog_size,
)

source_dir = pathlib.Path(args.source_dir)
output_filename = pathlib.Path(args.filename)


def copy_files(todo):
    for src in todo:
        if src.is_dir():
            dst = src.relative_to(source_dir)
            print(f"- mkdir: {dst}")
            lfs.mkdir(str(dst))
        if src.is_file():
            dst = src.relative_to(source_dir)
            print(f"- copy: {src} to {dst}")
            with lfs.open(str(dst), "wb") as outfile:
                with open(src, "rb") as infile:
                    outfile.write(infile.read())


if args.manifest is None:
    print(f"Copying directory: {args.source_dir}")
    # Walk the entire source dir and copy *everything*
    copy_files(source_dir.glob("**/*"))

else:
    print(f"Using manifest: {args.manifest}")
    # Copy files/globs listed in the manifest relative to the source dir
    todo = open(args.manifest, "r").read().split("\n")
    for item in todo:
        dir = pathlib.Path(item).parent
        try:
            lfs.mkdir(str(dir))
        except FileExistsError:
            pass
        copy_files(source_dir.glob(item))


bin_filename = output_filename.with_suffix(".bin")

with open(bin_filename, "wb") as f:
    f.write(lfs.context.buffer)

print(f"Written: {bin_filename}")

uf2_filename = output_filename.with_suffix(".uf2")

with open(uf2_filename, "wb") as f:
    f.write(convert_to_uf2(lfs.context.buffer))

print(f"Written: {uf2_filename}")
