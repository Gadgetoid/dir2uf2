#!/usr/bin/env python3

import os
import math
import argparse
import struct
import pathlib
import littlefs
from py_decl import PyDecl, UF2Reader


UF2_MAGIC_START0 = 0x0A324655  # "UF2\n"
UF2_MAGIC_START1 = 0x9E5D5157  # Randomly selected
UF2_MAGIC_END    = 0x0AB16F30  # Ditto
FS_START_ADDR    = 0x1012c000  # Pico W MicroPython LFSV2 offset
FS_SIZE          = 848 * 1024


FAMILY_ID_RP2040 = 0xe48bff56  # RP2040
FAMILY_ID_PAD    = 0xe48bff57  # ???
FAMILY_ID_RP2350 = 0xe48bff59  # RP2350

RP_FLASH_BLOCK_SIZE = 4096

BLOCK_SIZE = 512
DATA_SIZE = 256
HEADER_SIZE = 32
FOOTER_SIZE = 4
PADDING_SIZE = BLOCK_SIZE - DATA_SIZE - HEADER_SIZE - FOOTER_SIZE
DATA_PADDING = b"\x00" * PADDING_SIZE


def uf2_to_bin(data):
    section_index = 0
    for offset in range(0, len(data), BLOCK_SIZE):
        start0, start1, flags, addr, size, block_no, num_blocks, family_id = struct.unpack(b"<IIIIIIII", data[offset:offset + HEADER_SIZE])

        if block_no == 0:
            yield section_index, addr, family_id, flags, num_blocks, uf2_section_data(data[offset:])
            section_index += 1


def uf2_section_data(data):
    for offset in range(0, len(data), BLOCK_SIZE):
        start0, start1, flags, addr, size, block_no, num_blocks, family_id = struct.unpack(b"<IIIIIIII", data[offset:offset + HEADER_SIZE])

        if block_no == 0 and offset >= BLOCK_SIZE:
            break

        if args.debug:
            print(f"Block {block_no}/{num_blocks} addr {addr:08x} size {size}")

        yield addr, data[offset + HEADER_SIZE:offset + HEADER_SIZE + DATA_SIZE]


def bin_to_uf2(sections):
    for section in sections:
        offsets, datas, family_id, flags = section

        if not isinstance(offsets, (list, tuple)):
            offsets = (offsets, )
            datas = (datas, )

        total_blocks = sum([(len(data) + (DATA_SIZE - 1)) // DATA_SIZE for data in datas])

        # HACK: If we don't use "num_blocks + 1" then the 0xe48bff57
        # section at the top of RP2350 UF2 files will have a block count
        # of 1 and simply not flash, at all. I don't know why this is.
        if family_id == FAMILY_ID_PAD:
            total_blocks += 1

        block_no = 0

        for i in range(len(offsets)):
            offset = offsets[i]
            data = datas[i]

            num_blocks = (len(data) + (DATA_SIZE - 1)) // DATA_SIZE

            if args.debug:
                print(f"uf2: Adding {len(data)} bytes at 0x{offset:08x}")

            for block_index in range(num_blocks):
                ptr = DATA_SIZE * block_index

                chunk = data[ptr:ptr + DATA_SIZE].rjust(DATA_SIZE, b"\x00")
                header = struct.pack(
                    b"<IIIIIIII",
                    UF2_MAGIC_START0, UF2_MAGIC_START1, flags,
                    ptr + offset, DATA_SIZE, block_no, total_blocks,
                    family_id)

                footer = struct.pack(b"<I", UF2_MAGIC_END)

                block = header + chunk + DATA_PADDING + footer

                block_no += 1

                if len(block) != BLOCK_SIZE:
                    raise RuntimeError("Invalid block size")

                yield block


parser = argparse.ArgumentParser()
parser.add_argument("--filename", type=pathlib.Path, default="filesystem", help="Output filename.")
parser.add_argument("--fs-start", type=int, default=None, help="Filesystem offset.")
parser.add_argument("--fs-size", type=int, default=None, help="Filesystem size.")
parser.add_argument("--fs-compact", action="store_true", help="Compact filesystem to used blocks.")
parser.add_argument("--fs-overwrite", action="store_true", help="Replace an existing filesystem in the UF2.")
parser.add_argument("--sparse", action="store_true", help="Skip padding between app and filesystem.")
parser.add_argument("--block-size", type=int, default=4096, help="LFS block size in Kb.")
parser.add_argument("--read-size", type=int, default=256, help="LFS read size in Kb.")
parser.add_argument("--prog-size", type=int, default=32, help="LFS prog size in Kb.")
parser.add_argument("--manifest", default=None, help="Manifest to filter copied files.")
parser.add_argument("--append-to", type=pathlib.Path, default=None, help="uf2 file to append filesystem.")
parser.add_argument("--debug", action="store_true", help="Debug output.")
parser.add_argument("--verbose", action="store_true", help="Verbose output.")
parser.add_argument("source_dir", type=pathlib.Path, help="Source directory.")
args = parser.parse_args()

if args.fs_start is None or args.fs_size is None:
    if args.append_to is None:
        raise argparse.ArgumentError("Either an --append-to UF2 file or explicit --fs-start and --fs-size required!")

    if not args.append_to.is_file():
        raise RuntimeError(f"Could not find {args.append_to}")

    py_decl = PyDecl(UF2Reader(args.append_to))
    parsed = py_decl.parse()
    block_devices = parsed.get("BlockDevice", [])
    for block_device in block_devices:
        args.fs_start = block_device.get("address")
        args.fs_size = block_device.get("size")
        print(f"Auto detected fs: 0x{args.fs_start:08x} ({args.fs_start}), {args.fs_size} bytes.")
        break

block_count = math.ceil(args.fs_size / args.block_size)
if block_count * args.block_size != args.fs_size:
    print("image size should be a multiple of block size")
    exit(1)

lfs = littlefs.LittleFS(
    block_size=args.block_size,
    block_count=block_count,
    read_size=args.read_size,
    prog_size=args.prog_size,
)

output_filename = args.filename


def copy_files(lfs, todo, source_dir):
    for src in todo:
        if src.is_dir():
            dst = src.relative_to(source_dir)
            if args.verbose:
                print(f"- mkdir: {dst}")
            lfs.makedirs(dst.as_posix().replace("\\", "/"), exist_ok=True)
        if src.is_file():
            dst = src.relative_to(source_dir)
            if args.verbose:
                print(f"- copy: {src} to {dst}")
            with lfs.open(dst.as_posix().replace("\\", "/"), "wb") as outfile:
                with open(src, "rb") as infile:
                    outfile.write(infile.read())


def copy_manifest_or_dir(lfs, source_dir):
    if args.manifest is None:
        print(f"Copying directory: {source_dir}")
        # Walk the entire source dir and copy *everything*
        search_path = os.path.join("**", "*")
        copy_files(lfs, source_dir.glob(search_path), source_dir)

    else:
        print(f"Using manifest: {args.manifest}")
        # Copy files/globs listed in the manifest relative to the source dir
        todo = [line.strip() for line in open(args.manifest, "r").readlines() if line.strip()]
        for item in todo:
            parent_dir = pathlib.Path(item).parent
            lfs.makedirs(str(parent_dir), exist_ok=True)
            copy_files(lfs, source_dir.glob(item), source_dir)


copy_manifest_or_dir(lfs, args.source_dir)

# Write a .bin with *just* the filesystem
bin_filename = output_filename.with_suffix(".bin")
lfs_used_bytes = len(lfs.context.buffer)

if args.fs_compact:
    lfs_used_bytes = lfs.used_block_count * args.block_size

    print(f"Compacting LittleFS to {lfs_used_bytes / 1024}K.")

    lfs_compact = littlefs.LittleFS(
        block_size=args.block_size,
        block_count=lfs.used_block_count,
        read_size=args.read_size,
        prog_size=args.prog_size,
    )

    copy_manifest_or_dir(lfs_compact, args.source_dir)

    lfs_compact.fs_grow(block_count)

    lfs_data = lfs_compact.context.buffer

else:
    lfs_data = lfs.context.buffer


with open(bin_filename, "wb") as f:
    f.write(lfs_data)

print(f"Written: {bin_filename}")


# Write a .uf2 with *just* the filesystem
uf2_filename = output_filename.with_suffix(".uf2")

with open(uf2_filename, "wb") as f:
    for block in bin_to_uf2([(args.fs_start, lfs_data, FAMILY_ID_RP2040, 0x2000)]):
        f.write(block)

print(f"Written: {uf2_filename}")

if args.append_to is not None:
    if not args.append_to.is_file():
        raise RuntimeError(f"Could not find {args.append_to}")

    uf2_append_filename = output_filename.with_name(f"{args.append_to.stem}-{uf2_filename.stem}.uf2")

    print(f"Appending to {args.append_to}")

    output_sections = []

    with open(uf2_append_filename, "wb") as f:
        append_to = open(args.append_to, "rb").read()

        sections = uf2_to_bin(append_to)

        fs_family_id = None
        fs_start = args.fs_start

        for section in sections:
            section_index, start_addr, family_id, flags, num_blocks, block_data = section
            # For each section reshuffle the section into the format expected
            # by bin_to_uf2 and append it to our list of output sections.
            # In the case of flash sections, append the filesystem according to
            # the given command-line options.

            # Flatten the block data generator
            block_data = list(block_data)

            # Grab the addresses from the block list and check they don't include
            # our filesystem region.
            block_addresses = map(lambda b: b[0], block_data)
            if args.fs_start in block_addresses and not args.fs_overwrite:
                raise RuntimeError("Trying to append over an existing filesystem!")

            # The generator returns the address and data chunk, but we're
            # assuming the addresses are contiguous and discarding them!
            # Discard any blocks >= to the filesystem start address, since
            # if we hit this line and they exist they're getting replaced!
            block_data = b"".join(b[1] for b in block_data if b[0] < args.fs_start)

            # If the section family ID matches RP2040 or RP2350 then append
            # our littlefs filesystem to that specific block.
            if family_id in (FAMILY_ID_RP2040, FAMILY_ID_RP2350):
                if args.sparse:
                    # Attempt to create a spare .uf2 without a zero fill between
                    # the app and filesystem. Be careful to avoid RP2040 errata
                    # E14 where non-block-aligned sparse .uf2s would not be
                    # correctly written.
                    fw_size = len(block_data)
                    fw_size /= float(RP_FLASH_BLOCK_SIZE)
                    fw_size = math.ceil(fw_size) * RP_FLASH_BLOCK_SIZE

                    block_data = block_data.ljust(fw_size, b"\xff")

                    # Align the start of the filesystem to the next block
                    fs_start -= start_addr
                    fs_start /= float(RP_FLASH_BLOCK_SIZE)
                    fs_start = math.ceil(fs_start) * RP_FLASH_BLOCK_SIZE
                    fs_start += start_addr
                    fs_padding = fs_start - args.fs_start

                    lfs_data = lfs_data.rjust(len(lfs_data) + fs_padding, b"\xff")

                    # Add our filesystem to the flash section
                    output_sections.append((
                        (start_addr, fs_start),
                        (block_data, lfs_data),
                        family_id,
                        flags
                    ))
                else:
                    # If we're not sparse, then pad from the end of our firmware
                    # right up to the start of the filesystem
                    fw_size = fs_start - start_addr
                    block_data = block_data.ljust(fw_size, b"\xff")

                    # Concat our filesystem onto the data
                    output_sections.append((
                        start_addr,
                        block_data + lfs_data,
                        family_id,
                        flags
                    ))

            # If the section family ID *dot not* match RP2040 or RP2350 then
            # append this section unmangled. (Used for the first section in
            # RP2350 UF2 files)
            else:
                output_sections.append((
                    start_addr,
                    block_data,
                    family_id,
                    flags
                ))

        # Pack data into a uf2 at offset start_addr
        # This will be FS_START_ADDR if we're not appending.
        for block in bin_to_uf2(output_sections):
            f.write(block)

        print(f"Written: {uf2_append_filename}")
